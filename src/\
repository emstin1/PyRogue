class TestRoom:
    from random import randint, seed
    def __init__(self, width, height):
        self.height = height
        self.width = width
        self.room = None
        self.empty_floor = '.'
        self.rock = '#'

    def __return_random_tile(self):
        val = self.randint(0,1)
        if val == 0:
            return self.empty_floor
        elif val == 1:
            return self.rock

    def init_room(self):
        self.room = [ [self.return_random_tile() for x in range(self.width)] for y in range(self.height)]

class DbRoom(TestRoom):
    def __init__(self, width, height):
        TestRoom.__init__(self, width, height)


class ForestRoom(TestRoom):
    from Terrain import ForestTerrain
    def __init__(self, width, height, usr_seed, rng_range):
        TestRoom.__init__(self, width, height)
        self.usr_seed = usr_seed
        self.rng_range = rng_range
        TestRoom.seed(self.usr_seed)

    def init_room(self):
       self.room = [ [self.ForestTerrain.FLOOR.value for x in range(self.width)] for y in range(self.height)] 
    
    def seed_forest(self, tree_number, seeding_radius, seedfall, decay_rate, ground_coverage):
        """Places our initial tree locations for the forrest room

           tree_number     = ininital number of trees
           seeding_radius  = radius seeds from trees can travel
           seedfall        = number of seeds that fall from trees
           decay_rate      = rate at which fallen seeds decay
           ground_coverage = percentage of the room to be covered in trees"""
        for _ in range(tree_number):
            self.room[ self.randint(0, self.height-1)][self.randint(0, self.width-1)] = self.ForestTerrain.TREE.value
